import lingo/pegcode/driver;
import string;

export {

Expression ::= Add, Subtract, Multiply, Divide, Power, Log, Negative, Variable, Number;

Add		    (left : Expression, right : Expression);
Subtract	(left : Expression, right : Expression);
Multiply	(left : Expression, right : Expression);
Divide		(left : Expression, right : Expression);
Power		(left : Expression, right : Expression);

Log		    (exp : Expression);
Negative    (exp: Expression);

Variable	(var : string);
Number		(num : double);

astToString(exp : Expression) -> string;
expressionToString(exp: Expression)->string;
calculate(exp : Expression, Variables : Tree<string, double>) -> Maybe<double>;
simplify(exp : Expression) -> Expression;
derivative(exp : Expression, var : string) -> Expression;
simplifiedDerivative(exp : Expression, vars : string) -> Expression;
getVariables() -> Tree<string, double>;

}

astToString(exp : Expression) -> string{
    switch(exp){
        Add		    (l, r) :   "Add("       + astToString(l) + ", " + astToString(r) + ")";
        Subtract	(l, r) :   "Subtract("  + astToString(l) + ", " + astToString(r) + ")";
        Multiply	(l, r) :   "Multiply("  + astToString(l) + ", " + astToString(r) + ")";
        Divide		(l, r) :   "Divide("    + astToString(l) + ", " + astToString(r) + ")";
		Power		(l, r) :   "Power("     + astToString(l) + ", " + astToString(r) + ")";

		Log		    (v) :      "Log("       + astToString(v) + ")";
        Negative    (e) :      "Negative("  + astToString(e) + ")";

        Number      (num)   :  "Number(" + d2s(num) + ")";
        Variable	(v):       "Variable(\""+ v + "\")";
    }
}

expressionToString(exp: Expression)->string{
    switch(exp){
        Add		    (l, r) :   "(" 	+ expressionToString(l) + "+" + expressionToString(r) + ")";
        Subtract	(l, r) :   "(" 	+ expressionToString(l) + "-" + expressionToString(r) + ")";
        Multiply	(l, r) :   "(" 	+ expressionToString(l) + "*" + expressionToString(r) + ")";
        Divide		(l, r) :   "(" 	+ expressionToString(l) + "/" + expressionToString(r) + ")";
		Power		(l, r) :   "(" 	+ expressionToString(l) + "^" + expressionToString(r) + ")";

		Log		    (v) :      "log(" + expressionToString(v) + ")";
        Negative	(v) :      "(-"   + expressionToString(v) + ")";

        Number		(num) : d2s(num);
        Variable	(v): v;
    }
}

calculate(exp : Expression, Variables : Tree<string, double>) -> Maybe<double>{
    simplified = simplify(exp);

    getValue = \l, r, operator -> {
        switch(calculate(l, Variables)) {
            Some(left) : switch(calculate(r, Variables)){
                Some(right) : operator(left, right);
                None() : None();
            }
            None() : None();
        }
    }

    div = \left, right -> if(right == 0.0) {
                        None();
                    } else {
                        Some(left / right);
                        };

    switch(simplified){
        Add(l, r)       : getValue(l, r, \left, right -> Some(left + right));
        Subtract(l, r)  : getValue(l, r, \left, right -> Some(left - right));
        Multiply(l, r)  : getValue(l, r, \left, right -> Some(left * right));
        Divide(l, r)    : getValue(l, r, div);
		Power(l, r)     : getValue(l, r, \left, right -> dpow2(left, right));

		Log(v) : switch(calculate(v, Variables)) {
            Some(value): if(value <= 0.0){
                None();
            } else {
                Some(log(value));
                }
            None() : None();
        }
        Negative(e) : switch(calculate(e, Variables)) {
            Some(value) : Some(-value);
            None() : None();
        }

        Number(num) : Some(num);
        Variable(name) : lookupTree(Variables, name);
    }
}

simplify(exp : Expression) -> Expression{
    switch (exp) {
        Add(l, r): {
            left = simplify(l);
            right = simplify(r);
            
            if(left == Number(0.0) && right == Number(0.0)) {
                Number(0.0);
            } else if(left == Number(0.0)) {
                right;
            } else if(right == Number(0.0)) {
                left;
            } else {
                switch(right){
                    Negative(v) : Subtract(left, v);
                    default : Add(left, right); 
                }
            }
        }

        Subtract(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(left == Number(0.0) && right == Number(0.0)) {
                Number(0.0);
            } else if(left == Number(0.0)){
                Negative(right);
            } else if (right == Number(0.0)) {
                left;
            } else{
                switch(right){
                    Negative(v) : Add(left, v);
                    default : Subtract(left, right);
                }
            }
        }

        Multiply(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(left == Number(1.0)) {
                right;
            } else if(right == Number(1.0)) {
                left;
            } else if (left == Number(0.0) || right == Number(0.0)) {
                Number(0.0);
            } else if(right == left) {
                Power(right, Number(2.0));
            } else{
                Multiply(left, right);
            }
        }

        Divide(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(right == Number(0.0)){
                Divide(left, right);
            } else if((left == Number(0.0)) && right != Number(0.0)) {
                Number(0.0);
            } else if(right == Number(1.0)) {
                left;
            } else if(right == left) {
                Number(1.0);
            } else {
                Divide(left, right);
            }
        }

        Power(l, r) : {
            left = simplify(l);
            right = simplify(r);

            if(right == Number(0.0)) {
                Number(1.0);
            } else if(left == Number(0.0) && right != Number(0.0)) {
                Number(0.0);
            } else {
                Power(left, right);
            }
        }
        
        Log(e):{
            simplified = simplify(e);
            
            if(simplified == Number(1.0)){
                Number(0.0);
            } else {
                Log(simplified);
            }
        }

        Negative(e):{
            simplified = simplify(e);

            switch(simplified){
                Negative(ex) : ex;
                default : { 
                if(simplified == Number(0.0)){
                    Number(0.0);
                }else{ 
                    Negative(simplified)};
                }
            }
        }

        default: exp;
    }
}

derivative(exp : Expression, var : string) -> Expression {
    switch(exp) {
        Add(l, r)       : Add(derivative(l, var),derivative(r, var));
        Subtract(l, r)  : Subtract(derivative(l, var),derivative(r, var));
        Multiply(l, r)  : Add(Multiply(derivative(l, var), r), Multiply(l, derivative(r, var)));
        Divide(l, r)    : Divide(Subtract(Multiply(derivative(l, var), r), Multiply(l, derivative(r, var))), Multiply(r, r));
        //l^r = l^r * ((r'*log(l)) + r* l'/ l) ->  l^r-1 * r * l' \или\ l^r * ((r'*log(l))
        Power(l, r)     : Multiply(Power(l, r), Add(Multiply(derivative(r, var), Log(l)), Divide(Multiply(r, derivative(l, var)), l)));
        
        Log(e)          : Divide(derivative(e, var), e);
        Negative(e)     : Negative(derivative(e, var));

        Number(value)  : Number(0.0);
        Variable(v)      : if(v == var) {
            Number(1.0);
            } else {
                Number(0.0);
            }
    }
}

simplifiedDerivative(exp : Expression, var : string) -> Expression {
    simplify(derivative(exp, var));
}

getVariables() -> Tree<string, double> {
	parameters_array = getAllUrlParametersArray();
	fold(parameters_array, makeTree(),\ tree, parameter-> {
			setTree(tree, parameter[0], s2d(parameter[1]))
		}
	);
}